{
  "name": "Cachestore",
  "tagline": "",
  "body": "##What is CacheStore?\r\nCacheStore is a key-value hybrid storage system between memory cache and disk. It is high performance, horizontal scale and high availability. It was developed to support real time auction and high performance ad serving systems.\r\n\r\n## Motivation\r\n\r\n* Originally, it was contributed as a storage plug-in for Project Voldemort, but we decided to start it as a stand alone distributed system\r\n* Better \"Fail-Safe\" mechanism in a distributed system without compromising performance\r\n * Utilize Memory and Disk\r\n * Server side replication\r\n* Ability to store data as Objects or Primitives\r\n\r\n##Features\r\n\r\n1. High performance.\r\n  * Random access in a few milliseconds per record\r\n1. Three types of deployment.\r\n  * Local (embedded in Java)\r\n  * Remote\r\n  * Cluster (distributed)\r\n1. Rich API.\r\n  * Single operation (get, put, insert and remove).\r\n  * Bulk operations  (multiGet, multiPut and multiRemove).\r\n  * Range scans for sorted stores. \r\n  * Server side cursor support for range scans, key iterators and key-value pairs.\r\n  * Customize stored procedures both in Java and Groovy (for dynamic deployment).\r\n  * Customize before and after triggers for get, put and remove in Java and Groovy. \r\n  * Query support for select and update statement with index search optimization. \r\n1. Supports sorted-map and hash-map stores with configuration change during system Bootstrap.\r\n1. Groovy command line shell for query statement and API interaction.\r\n1. Plug-in replication listener for heterogeneous storage RDBM persistence with support of computing delta between different versions.\r\n1. Server side serialization \r\n  * Get, put, and scan operations support query parameters to reduce payload between client and server.\r\n1. Currently supports Java and Groovy.\r\n  * PHP support in beta and other language support in development.\r\n1. Map Reducer currently in development.\r\n\r\n##Architecture\r\n\r\nCacheStore is a key-value system; it consists of two components; the in memory map (sorted or hash) and the persistence storage system. During the Bootstrap process, it loads all keys and meta data into the memory map. All values are lazy loaded from disk upon incoming request. It is implemented as a write-through cache and writes are durable. All values can be swapped between storage and memory. Data is replicated across designated nodes to assure reliability and the inclusion of clusters allows for load balancing. Nodes within clusters are homogeneous and are interchangeable. The bulk operation, range scan, cursor and query engine are built on top of the core system.\r\n\r\n##Performance\r\n\r\nThis is a high performance distributed storage system with replication on multiple nodes that is able to access keys from cached memory. Because of this, performance can be affected by, but not limited to, memory cache size, data size on node, and replication factor.\r\n\r\n##Memory\r\n\r\nCacheStore is unique because it is a hybrid storage system between memory cache and disk. This allows CacheStore to access data cached in memory with extremely high performance. Before the keys are cached into memory, however, it must first be bootstrapped from disk to memory. Once the keys are cached into memory, they can be accessed in nanoseconds. CacheStore uses a write-through cache to write synchronously to the cache as well as the backing store.\r\n\r\n##Storage\r\n\r\nKey-value storage is handled on the server side with all keys being written into the server disk with data correlating to each store. CacheStore is able to store multiple Java key types including Java primitives and objects.\r\n\r\nData for each store is saved into three unique files, extensions .key, .ndx, and .data, that work together to handle the data. The .key file stores information about the keys. The .ndx file links the keys to the values, which are stored in the .data file. As data is written, erased, and rewritten to the .data file, the .ndx file will update accordingly to point to the correct blocks in the .data file. Occasional data purging and compaction are recommended for regular maintenance routine via JMX.\r\n\r\n##Cluster\r\n\r\nClustering can be used for stores to increase performance and reliability. A multinode cluster can support data replication and load balancing to prevent \"hot spots\" from occurring.\r\n\r\n##Replication\r\n\r\nReplication is supported by remote and clustered servers and eliminates downtime for fail over procedures.\r\n\r\n##Query\r\n\r\nFull object queries, minus aggregation and joins, are supported on both primitives and objects. More query features are currently being developed.\r\n\r\n##Meta Data\r\n\r\nAs mentioned earlier, data is written synchronously to the store with writing to the cache. Data is written to server side stores defined in config/stores.xml with data being represented in the three files taking the store name with extensions .data, .key, and .ndx. Meta deta for objects is represented as java classes and must be included to correctly read and write corresponding objects.\r\n\r\n##CacheStore Advantages\r\n\r\n* Hybrid of cache and disk\r\n  * Access speeds of cache storage systems\r\n  * Reliability, storage, and features of disk storage systems\r\n* Server side replication\r\n  * No fail over downtime\r\n  * Continues to replicate and synchronize if there's failure\r\n* Load balancing\r\n  * Keys are evenly distributed among nodes\r\n  * Prevents hot spots from occurring\r\n* Access speeds in nanoseconds\r\n  * Built in caching system allows extremely high performance and access speeds\r\n* Special functions\r\n  * Full object queries\r\n  * Scans\r\n  * Cursors\r\n  * Store procedures\r\n  * Triggers\r\n  * Bulk operations\r\n\r\n##CacheStore Disadvantages\r\n\r\n* Constrained by memory as trade-off for high performance\r\n  * All keys must be loaded by Bootstrap\r\n  * Amount of keys limited by memory size\r\n\r\n##Comparison with Project Voldemort\r\n|                  | CacheStore          | Voldemort      |\r\n| ---------------- |:-------------------:| :-------------:|\r\n| Replication      | Yes                 | Yes            |\r\n| Storage          | Built In            | Plugin         |\r\n| Fail Over        | Yes                 | Yes            |\r\n| Load Balancing   | Yes                 | Yes            |\r\n| Operations       | Simple & Bulk       | Simple         |\r\n| Query            | Yes                 | No             |\r\n| Scan             | Yes                 | No             |\r\n| Cursor           | Yes                 | No             |\r\n| Stored Procedure | Yes                 | No             |\r\n| Trigger          | Yes                 | No             |\r\n| Ordered Tables   | Ordered & Unordered | Unordered      |\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}